from pydantic import BaseModel
from fastapi import FastAPI
from fastapi.routing import APIRouter
import time
import asyncio
import redis
import requests
import aiohttp
from typing import List


###############
# GLOBAL VARS #
###############


RESTRICT_MSG='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—Éüò¢\n–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è/–ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—É—á–∏ —Å–≤–æ–π telegram id –ø–æ –∫–æ–º–∞–Ω–¥–µ "/get_telegram_id" –∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ @Wash1se'
GREETING_MSG='''–ü—Ä–∏–≤–µ—Ç, {}üëã
    \n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∑–∞–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª info.json –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ
    \n–í–≤–µ–¥–∏ "/getfile", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞
    \n–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É
    \n–í–≤–µ–¥–∏ "/help", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–º–∞–Ω–¥  
                                                    '''
ERROR_MSG="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {}"
HELP_MSG='''–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–º–∞–Ω–¥:
    \n"/start" - –∑–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
    \n"/getfile" - –ø–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞
    \n"/start_scanning" - –Ω–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω
    \n"/stop_scanning" - –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    \n"/help" - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–º–∞–Ω–¥
    \n–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É
'''






##################
# REQUESTS FUNCS #
##################

async def async_get_request(url:str, proxy:str=""):
    async with aiohttp.ClientSession() as session:
        async with session.get(url, proxy=proxy) as response:
            return response


async def async_post_request(url:str, proxy:str="", data:dict={}):
    async with aiohttp.ClientSession() as session:
        async with session.post(url, proxy=proxy, data=data) as response:
            return response

django_url = 'http://localhost:8001/api/fastapi/'

async def send_response_to_django(tg_id:str, message:str):
    global django_url
    await async_post_request(
        url=django_url,
        data={"tg_id":tg_id, "message": message}
    )




####################
# DB QUERIES FUNCS #
####################


def get_if_scanning(tg_id:int):
    global Redis
    if str(Redis.get(str(tg_id))).replace('b','').replace("'", "") =='True':
        return True
    return False

def set_if_scanning(tg_id:int, value:str):
    global Redis
    with Redis.pipeline() as pipe:
        pipe.multi()
        pipe.set(str(tg_id), value.encode('utf-8'))
        result = pipe.execute()




################
#DATA INSTANCES#
################

class Account(BaseModel):
    link:str
    title:str

class Config(BaseModel):
    token:str
    accounts: List[Account]
    proxy: str
    max_purchases: str

class StartData(BaseModel):
    tg_id:int
    user_config: Config

class StopData(BaseModel):
    tg_id: int



##########
# WORKER #
##########

async def worker(tg_id:int, user_config:Config):
    while True:
        print(user_config)
        if not get_if_scanning(tg_id):
            return
        await send_response_to_django(
            tg_id,
            f"is working {Redis.get(str(tg_id)).decode('utf-8')}"
        )
        await asyncio.sleep(3)




async def worker(tg_id:int, user_config:Config):

    #check if StopLztBot flag is True
    if not get_if_scanning(tg_id):
        return

    #get info from user's config
    try:
        #lztbot initializing
        lolzbot = MyLolz(token=user_config.token, tg_id=tg_id, proxy=str(user_config.proxy))

        if await lolzbot.set_lolz_id():
            #get info about max purchases user's config
            max_purchases = int(user_config.max_purchases)

            await send_response_to_django(tg_id, '–°–∫–∞–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤...\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–≤–µ–¥–∏ "/stop_scanning"')

            while True:
                #check if StopLztBot flag is True or amount of purchased accounts is over than max purchases
                if (len(lolzbot.purchased_accounts) >= int(max_purchases)) or (not get_if_scanning(tg_id)):
                    set_if_scanning(tg_id, 'False')
                    return 

                #iterate for each account
                for account_input_info in user_config.accounts:

                    #check if StopLztBot flag is True or amount of purchased accounts is over than max purchases
                    if (len(lolzbot.purchased_accounts) >= int(max_purchases)) or (not get_if_scanning(tg_id)):
                        set_if_scanning(tg_id, 'False')
                        return False
                    
                    # try to scan accounts
                    try:
                        await lolzbot.scan_accounts(account_input_info=account_input_info, link=account_input_info['link'], max_purchases=max_purchases)
                    #handling all exceptions occured within the lztbot
                    except Exception as e:
                        await send_response_to_django(tg_id, ERROR_MSG.format(f"{e.args}\n\n–±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–∫–∞–Ω"))
        else:
            await send_response_to_django(tg_id, '–û—à–∏–±–∫–∞ —Å –ø—Ä–æ–∫—Å–∏\n\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∫–∞–Ω')
            set_if_scanning(tg_id, 'False')
            return         

    #handling all exceptions occured during getting info from user's config
    except Exception as e:
        await message.answer(ERROR_MSG.format(f"\n{e.args}\n–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –≤–∞—à–∏–º –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–æ–º –∏–ª–∏ –ø—Ä–æ–∫—Å–∏"))
        STOP_USER_WORKER[tg_id] = True
        return







###############
# FASTAPI APP #
###############


router = APIRouter()
app = FastAPI(title="lzttgbot")
Redis = redis.Redis(
    host="localhost",
    port=6379,
    db=0,
    )


@router.post('/start')
async def start(data:StartData):
    tg_id = data.tg_id
    user_config = data.user_config

    if get_if_scanning(tg_id):
        await send_response_to_django(
            tg_id=tg_id,
            message="–°–∫–∞–Ω —É–∂–µ –∏–¥–µ—Ç"
        )
    else:
        set_if_scanning(tg_id, 'True')
        asyncio.create_task(worker(tg_id, user_config))

@router.post('/stop')
async def stop(data:StopData):
    tg_id = data.tg_id

    if not get_if_scanning(tg_id):
        await send_response_to_django(
            tg_id=tg_id,
            message="–°–∫–∞–Ω –∏ —Ç–∞–∫ –Ω–µ –∏–¥–µ—Ç"
        )
    else:
        set_if_scanning(tg_id, 'False')
                
        await send_response_to_django(
            tg_id=tg_id,
            message="–°–∫–∞–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        )



app.include_router(router)

# if __name__ == "__main__":
#     uvicorn.run('main:app', host="0.0.0.0", port=8000, workers=3)

